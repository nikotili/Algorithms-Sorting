mergeSort(A):
	return doSort(A)

doSort(A):
	n = |A|
	if n > 1:
		left = A[0..n/2]
		right = A[n/2..n]
		return merge(doSort(left), doSort(right))
	end if
		
	return A
	
	

merge(A, B):
	m = |A|
	n = |B|
	C = array[m + n]
	k = 0
	i = 0
	j = 0
	while i < m and j < n:
		if A[i] <= B[j]:
			C[k] = A[i]
			i += 1
		end if
		else:
			C[k] = B[j]
			j += 1
		end else
		k += 1
	end while
	
	if i = m:
		while j < n:
			C[k] = B[j]
			k += 1
			j += 1
		end while
	end if
	else
		while i < m:
			C[k] = A[i]
			k += 1
			i += 1
		end while
	end else
	
	return C
	