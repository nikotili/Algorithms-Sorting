heapSort(A):
	buildMaxHeap(A)
	doSort(A)

buildMaxHeap(A):
	n = |A|
	for	heapSize = 1 to n - 1:
		currPos = heapSize
		while currPos > 0:
			parentIndex = (currPos - 1) / 2
			if A[currPos] < A[parentIndex]:
				break while
			end if
			
			swap A[currPos] with A[parentIndex]
			currPos = parentIndex
		end while
	end for
	

doSort(H):
	n = |H|
	for i = 0 to n - 2:
		swap H[0] with H[n - 1 - i]
		siftDown(H, n - 1 - i, 0)
	end for
	if H[0] > H[1]:
		swap H[0] with H[1]
	end if

siftDown(H, n, pos):
	if pos > (n - 2) / 2:
		return
	end if
	
	leftChildPos = pos * 2 + 1
	rightChildPos = leftChildPos + 1
	
	siftPos = pos
	if rightChildPos < n:
		if H[rightChildPos] > h[siftPos]:
			siftPos = rightChildPos
		end if
	end if
	
	if H[leftChildPos] > H[siftPos]:
		siftPos = leftChildPos
	end if
	
	if siftPos = pos
		return
	end if
	
	swap H[pos] with H[siftPos]

